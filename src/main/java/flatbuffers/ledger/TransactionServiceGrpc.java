//Generated by flatc compiler (version 24.3.25)
//If you make any local changes, they will be lost
//source: schema.fbs

package flatbuffers.ledger;

import com.google.flatbuffers.grpc.FlatbuffersUtils;

import java.nio.ByteBuffer;
import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler",
    comments = "Source: schema.fbs")
public final class TransactionServiceGrpc {

  private TransactionServiceGrpc() {}
  
  public static final String SERVICE_NAME = "flatbuffers.ledger.TransactionService";
  
  // Static method descriptors that strictly reflect the proto.
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getProcessTransactionMethod()} instead. 
  public static final io.grpc.MethodDescriptor<flatbuffers.ledger.TransactionRequest,
      flatbuffers.ledger.TransactionResponse> METHOD_PROCESS_TRANSACTION = getProcessTransactionMethod();
  
  private static volatile io.grpc.MethodDescriptor<flatbuffers.ledger.TransactionRequest,
      flatbuffers.ledger.TransactionResponse> getProcessTransactionMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<flatbuffers.ledger.TransactionRequest> extractorOfTransactionRequest;
  private static FlatbuffersUtils.FBExtactor<flatbuffers.ledger.TransactionRequest> getExtractorOfTransactionRequest() {
      if (extractorOfTransactionRequest != null) return extractorOfTransactionRequest;
      synchronized (TransactionServiceGrpc.class) {
          if (extractorOfTransactionRequest != null) return extractorOfTransactionRequest;
          extractorOfTransactionRequest = new FlatbuffersUtils.FBExtactor<flatbuffers.ledger.TransactionRequest>() {
              public flatbuffers.ledger.TransactionRequest extract (ByteBuffer buffer) {
                  return flatbuffers.ledger.TransactionRequest.getRootAsTransactionRequest(buffer);
              }
          };
          return extractorOfTransactionRequest;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<flatbuffers.ledger.TransactionResponse> extractorOfTransactionResponse;
  private static FlatbuffersUtils.FBExtactor<flatbuffers.ledger.TransactionResponse> getExtractorOfTransactionResponse() {
      if (extractorOfTransactionResponse != null) return extractorOfTransactionResponse;
      synchronized (TransactionServiceGrpc.class) {
          if (extractorOfTransactionResponse != null) return extractorOfTransactionResponse;
          extractorOfTransactionResponse = new FlatbuffersUtils.FBExtactor<flatbuffers.ledger.TransactionResponse>() {
              public flatbuffers.ledger.TransactionResponse extract (ByteBuffer buffer) {
                  return flatbuffers.ledger.TransactionResponse.getRootAsTransactionResponse(buffer);
              }
          };
          return extractorOfTransactionResponse;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<flatbuffers.ledger.TransactionRequest,
      flatbuffers.ledger.TransactionResponse> getProcessTransactionMethod() {
    io.grpc.MethodDescriptor<flatbuffers.ledger.TransactionRequest, flatbuffers.ledger.TransactionResponse> getProcessTransactionMethod;
    if ((getProcessTransactionMethod = TransactionServiceGrpc.getProcessTransactionMethod) == null) {
      synchronized (TransactionServiceGrpc.class) {
        if ((getProcessTransactionMethod = TransactionServiceGrpc.getProcessTransactionMethod) == null) {
          TransactionServiceGrpc.getProcessTransactionMethod = getProcessTransactionMethod = 
              io.grpc.MethodDescriptor.<flatbuffers.ledger.TransactionRequest, flatbuffers.ledger.TransactionResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "flatbuffers.ledger.TransactionService", "ProcessTransaction"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  flatbuffers.ledger.TransactionRequest.class, getExtractorOfTransactionRequest()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  flatbuffers.ledger.TransactionResponse.class, getExtractorOfTransactionResponse()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getProcessTransactionMethod;
  }
  
  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static TransactionServiceStub newStub(io.grpc.Channel channel) {
    return new TransactionServiceStub(channel);
  }
  
  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static TransactionServiceBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new TransactionServiceBlockingStub(channel);
  }
  
  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static TransactionServiceFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new TransactionServiceFutureStub(channel);
  }
  
  /**
   */
  public static abstract class TransactionServiceImplBase implements io.grpc.BindableService {
    
    /**
     */
    public     void processTransaction(flatbuffers.ledger.TransactionRequest request,
        io.grpc.stub.StreamObserver<flatbuffers.ledger.TransactionResponse> responseObserver)     {
      asyncUnimplementedUnaryCall(getProcessTransactionMethod(), responseObserver);
    }
    
    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getProcessTransactionMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                flatbuffers.ledger.TransactionRequest,
                flatbuffers.ledger.TransactionResponse>(
                  this, METHODID_PROCESS_TRANSACTION)))
          .build();
    }
  }
  
  /**
   */
  public static final class TransactionServiceStub extends io.grpc.stub.AbstractStub<TransactionServiceStub> {
    private TransactionServiceStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private TransactionServiceStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected TransactionServiceStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new TransactionServiceStub(channel, callOptions);
    }
    
    /**
     */
    public     void processTransaction(flatbuffers.ledger.TransactionRequest request,
        io.grpc.stub.StreamObserver<flatbuffers.ledger.TransactionResponse> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getProcessTransactionMethod(), getCallOptions()), request, responseObserver);
    }
  }
  
  /**
   */
  public static final class TransactionServiceBlockingStub extends io.grpc.stub.AbstractStub<TransactionServiceBlockingStub> {
    private TransactionServiceBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private TransactionServiceBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected TransactionServiceBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new TransactionServiceBlockingStub(channel, callOptions);
    }
    
    /**
     */
    public     flatbuffers.ledger.TransactionResponse processTransaction(flatbuffers.ledger.TransactionRequest request)     {
      return blockingUnaryCall(
          getChannel(), getProcessTransactionMethod(), getCallOptions(), request);
    }
  }
  
  /**
   */
  public static final class TransactionServiceFutureStub extends io.grpc.stub.AbstractStub<TransactionServiceFutureStub> {
    private TransactionServiceFutureStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private TransactionServiceFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected TransactionServiceFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new TransactionServiceFutureStub(channel, callOptions);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<flatbuffers.ledger.TransactionResponse> processTransaction(
        flatbuffers.ledger.TransactionRequest request)     {
      return futureUnaryCall(
          getChannel().newCall(getProcessTransactionMethod(), getCallOptions()), request);
    }
  }
  
  private static final int METHODID_PROCESS_TRANSACTION = 0;
  
  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final TransactionServiceImplBase serviceImpl;
    private final int methodId;
  
    MethodHandlers(TransactionServiceImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }
  
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_PROCESS_TRANSACTION:
          serviceImpl.processTransaction((flatbuffers.ledger.TransactionRequest) request,
              (io.grpc.stub.StreamObserver<flatbuffers.ledger.TransactionResponse>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }
  
  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;
  
  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (TransactionServiceGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)              
              .setSchemaDescriptor(null)              
              .addMethod(getProcessTransactionMethod())              
              .build();
        }
      }
    }
    return result;
  }
}
